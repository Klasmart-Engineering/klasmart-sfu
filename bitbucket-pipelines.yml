definitions:
  caches:
    nodemodules: ./node_modules
  steps:
    - step: &slack-notification
        name: Slack Notification
        script:
          - pipe: atlassian/slack-notify:1.0.1
            variables:
              WEBHOOK_URL: ''
              MESSAGE: '($BITBUCKET_COMMIT) for "$BITBUCKET_BRANCH"'
    - step: &step-secret-check
        name: Atlassian Security Secrets Scan
        script:
          - pipe: atlassian/git-secrets-scan:0.5.1
    - step: &step-build-npm
        name: "Build NPM"
        image: node:lts
        script:
          - apt-get update && apt-get install python3-pip -y
          - npm ci
          - npm run build
        caches:
          - nodemodules
        artifacts:
          - node_modules/**
          - dist/**
    - step: &step-build-docker
        name: "Docker build & push to docker image"
        image: python:3.9-alpine
        script:
          - pip3 install -U awscli

          - export BRANCH_TAG=$(echo "$BITBUCKET_BRANCH" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
          - export REPO=$DOCKER_REPO_URL/kidsloop-sfu # DOCKER_REPO_URL is workspace wide variable
          - export COMMIT_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-7)
          - printf '"Git tag":"%s", "Git commit":"%s" "ECR repo":"%s"' $BRANCH_TAG $COMMIT_TAG $REPO

          - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $DOCKER_REPO_URL

          - cp deploy/Dockerfile.bitbucket-pipeline .
          - cp deploy/nodesource.gpg.key .
          - docker build -t kidsloop-sfu -f Dockerfile.bitbucket-pipeline .

          - docker tag kidsloop-sfu:latest $REPO:$BRANCH_TAG
          - docker tag kidsloop-sfu:latest $REPO:$BRANCH_TAG-latest
          - docker tag kidsloop-sfu:latest $REPO:$BRANCH_TAG-$BITBUCKET_BUILD_NUMBER
          - docker tag kidsloop-sfu:latest $REPO:$BRANCH_TAG-$COMMIT_TAG

          - docker push $REPO:$BRANCH_TAG
          - docker push $REPO:$BRANCH_TAG-latest
          - docker push $REPO:$BRANCH_TAG-$BITBUCKET_BUILD_NUMBER
          - docker push $REPO:$BRANCH_TAG-$COMMIT_TAG

        services:
          - docker
        caches:
          - docker
    - step: &step-build-docker-loadtest
        name: "Docker build & push to docker image"
        image: python:3.9-alpine
        script:
          - pip3 install -U awscli
          - export BRANCH_TAG=$(echo "$BITBUCKET_BRANCH" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
          - export REPO=$DOCKER_REPO_URL/kidsloop-sfu # DOCKER_REPO_URL is workspace wide variable
          - export COMMIT_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-7)
          - printf '"Git tag":"%s", "Git commit":"%s" "ECR repo":"%s"' $BRANCH_TAG $COMMIT_TAG $REPO
          - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $DOCKER_REPO_URL

          - cp deploy/Dockerfile.lt.bitbucket-pipeline .
          - cp deploy/nodesource.gpg.key .
          - cp config/.env.loadtest ./.env
          - docker build -t kidsloop-sfu -f Dockerfile.lt.bitbucket-pipeline .

          - docker tag kidsloop-sfu:latest $REPO:lt-$BRANCH_TAG-$COMMIT_TAG
          - docker push $REPO:lt-$BRANCH_TAG-$COMMIT_TAG
        services:
          - docker
        caches:
          - docker

    - step: &step-deploy-landing-zone
        name: "Deploy built image to the Kidsloop landing zone"
        image: python:3.9-alpine
        # image: argoproj/argocd:v2.3.1
        script:
          # What are we deploying?
          - export BRANCH_TAG=$(echo "$BITBUCKET_BRANCH" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
          - export REPO=$DOCKER_REPO_URL/kidsloop-sfu # DOCKER_REPO_URL is workspace wide variable
          - export COMMIT_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-7)
          - printf '"Git tag":"%s", "Git commit":"%s" "ECR repo":"%s"' $BRANCH_TAG $COMMIT_TAG $REPO
          - export DEPLOY_TAG=$BRANCH_TAG-$COMMIT_TAG
          # Set up port forwarding
          - echo $TOOLS_KUBECONFIG_CONTENT_B64 | base64 -d > $BITBUCKET_CLONE_DIR/kubeconfig.yml
          - >
            PORTFORWARD_CONTAINER=$(
            docker run
            --volume $BITBUCKET_CLONE_DIR/kubeconfig.yml:/mnt/kubeconfig.yml
            --env KUBECONFIG=/mnt/kubeconfig.yml
            --publish 8080:8080
            --hostname kubeproxy
            --detach bitnami/kubectl:1.21
            port-forward -n argocd svc/argocd-server 8080:80
            )
          - sleep 5
          - apk add curl
          - curl -v http://localhost:8080

          - docker logs $PORTFORWARD_CONTAINER
          - docker kill $PORTFORWARD_CONTAINER
          - docker rm $PORTFORWARD_CONTAINER
          # to do - set up port forwarding, connect to ArgoCD server, update tag and sync app
        services:
          - docker
        caches:
          - docker

pipelines:
  branches:
    wip/loadtest:
      - step: *step-secret-check
      - step: *step-build-npm
      - step: *step-build-docker-loadtest
    master:
      - step: *step-secret-check
      - step: *step-build-npm
      - step: *step-build-docker

    alpha:
      - step: *step-secret-check
      - step: *step-build-npm
      - step: *step-build-docker
      - step: &step-deploy-alpha
          name: Deploy to alpha
          deployment: alpha
          image: python:3.7.4-alpine3.10
          script:
            - pip3 install -U awscli
            - AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY_ALPHA_OLD" AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID_ALPHA_OLD" aws ecs update-service --service arn:aws:ecs:ap-northeast-2:871601235178:service/kidsloop-alpha/kidsloop-alpha-live-sfu --force-new-deployment --cluster kidsloop-alpha --region ap-northeast-2

    # Temporary (for testing)
    feature/SMK-167_landing-zone-pipeline:
      - step: *step-deploy-landing-zone

  custom:
    deploy-alpha:
      - step: *step-deploy-alpha
